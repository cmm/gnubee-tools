#!/bin/busybox ash
#  SPDX-License-Identifier: GPL-2.0

gnubee_switch_root(){
  echo "Partition GNUBEE-ROOT found. Starting..." > /dev/kmsg
  r=`uname -r`
  if [ -d /mnt/root/lib/modules/$r ] &&
     [ -f /mnt/root/lib/modules/stamp ] &&
     [ " `cat /lib/modules/stamp`" = " `cat /mnt/root/lib/modules/stamp`" ]
  then : skip - already installed
  else
     # ensure modules are available
     mount -t tmpfs tmpfs /mnt/root/lib/modules
     cp -a /lib/modules/. /mnt/root/lib/modules/
     # swconfig might be useful too
     [ -f /bin/swconfig ] && cp /bin/swconfig /mnt/root/lib/modules
     # and "keep" is needed of course
     cp /keep /mnt/root/lib/modules/
  fi

  # extract MAC address from 'factory' partition
  addr=`dd 2> /dev/null if=/dev/mtd2 bs=1 skip=57344 count=6 | od -t x1 -A none`
  ip link set eth0 address `echo $addr | tr ' ' :`

  umount /proc /sys /dev
  exec switch_root /mnt/root /sbin/init
}

gnubee_mount_x_initrd_dev(){
  x_dev=`eval echo '$x_'$1'_dev'`
  x_path=`eval echo '$x_'$1'_path'`
  x_type=`eval echo '$x_'$1'_type'`
  x_opts=`eval echo '$x_'$1'_opts'`

  # filter systemd cookies out of opts
  x_opts=`echo $x_opts | busybox sed -e 's/\bx-initrd[^, ]*\b//g' -e 's/\bx-systemd[^, ]*\b//g' -e 's/,,*/,/g' -e 's/^,//' -e 's/,$//'`
  mount -t $x_type -o "$x_opts" $x_dev /mnt/root$x_path
}

gnubee_mount_x_initrd(){
  [ -r $1 ] || return 0

  x_devs=
  x_bind_devs=
  x_i=0
  while read x_dev x_path x_type x_opts x_whatever; do
    [ -z "$x_dev" ] && continue
    [ -n "`echo $x_dev | busybox grep '^#'`" ] && continue
    [ -z "`echo $x_opts | busybox grep -Fw x-initrd.mount`" ] && continue
    if [ "$x_type" = none ]; then
      x_bind_devs="$x_bind_devs $x_i"
    else
      x_devs="$x_devs $x_i"
    fi
    eval 'x_'$x_i'_dev'=$x_dev
    eval 'x_'$x_i'_path'=$x_path
    eval 'x_'$x_i'_type'=$x_type
    eval 'x_'$x_i'_opts'=$x_opts
    x_i=`busybox dc $x_i 1 + p`
  done < $1

  # non-bind mounts
  for x_i in $x_devs; do
    x_d_path=`eval echo '$x_'$x_i'_path'`

    gnubee_mount_x_initrd_dev $x_i

    # correct the dev part of any bind mounts under this one to point
    # under /mnt/root
    for x_b in $x_bind_devs; do
      x_b_dev=`eval echo '$x_'$x_b'_dev'`
      if [ -n `echo $x_b_dev | grep ^$x_d_path` ]; then
	eval 'x_'$x_b'_dev'=/mnt/root$x_b_dev
      fi
    done
  done

  # bind mounts
  for x_i in $x_bind_devs; do
    gnubee_mount_x_initrd_dev $x_i
  done
}

gnubee_boot(){
   mount -t proc none /proc
   mount -t sysfs none /sys
   mount -t devtmpfs devtmpfs /dev

   modprobe ahci
   modprobe xhci_mtk
   modprobe usb_storage
   modprobe sd_mod
   modprobe mtk_sd
   modprobe mmc_block

   modprobe ext4

   echo "/sbin/mdev" > /proc/sys/kernel/hotplug
   mdev -s

   echo -n ""

   echo -n "Waiting disk spinup..." > /dev/kmsg
   sleep 3
   echo "done." > /dev/kmsg

   echo "" > /proc/sys/kernel/hotplug

   if test -x /bin/mdadm; then
	modprobe md_mod
	echo 1 >  /sys/module/md_mod/parameters/start_ro
	echo "Assembling md arrays" > /dev/kmsg
	mdadm --assemble --scan --auto=md --run --freeze-reshape
   fi

   if test -x /bin/swconfig; then
	swconfig dev switch0 set reset
	swconfig dev switch0 set enable_vlan 1
	swconfig dev switch0 vlan 1 set ports '0 6t'
	swconfig dev switch0 vlan 2 set ports '4 6t'
	swconfig dev switch0 port 0 set pvid 1
	swconfig dev switch0 port 4 set pvid 2
	swconfig dev switch0 set apply
   fi


   echo -n "Searching for partition GNUBEE-ROOT..." > /dev/kmsg

   sleep 1

   while true; do
       crypt_root=`findfs PARTLABEL=GNUBEE-CRYPT-ROOT`
       if test -n "$crypt_root"; then
           cryptsetup open "$crypt_root" rootdev
           root_dev="/dev/mapper/rootdev"
       else
           root_dev=`findfs LABEL=GNUBEE-ROOT`
       fi

       if test -n "$root_dev" &&
               mount -o ro $root_dev /mnt/root &&
               test -L /mnt/root/sbin/init -o -e /mnt/root/sbin/init &&
               gnubee_mount_x_initrd /mnt/root/etc/fstab &&
               gnubee_switch_root
       then break
       else /bin/ash # recovery shell
       fi
   done
}

gnubee_boot
